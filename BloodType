// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract BloodType {

    struct Stake {
        uint256 amount;
        uint256 timestamp;
        address user;
    }

    struct Investment {
        address investor;
        address supervisor;
        address director;
        uint amount;
        uint timestamp;
    }

    Investment[] public investments;
    Stake[] public stakes;

    mapping(address => uint256) public stakingBalance;
    mapping(address => uint256) public rewardBalance;
    mapping(address => uint256) public lastStakedTime;

    uint256 public rewardRate = 100; // Example reward rate

    // DonFlow logic integrated into BloodType
    function createInvestment(address supervisor, address director, uint amount) public {
        Investment memory newInvestment = Investment({
            investor: msg.sender,
            supervisor: supervisor,
            director: director,
            amount: amount,
            timestamp: block.timestamp
        });
        investments.push(newInvestment);
    }

    function stakeTokens(uint256 _amount) public {
        require(_amount > 0, "Cannot stake 0 tokens");

        // Push to stakes array
        stakes.push(Stake({
            amount: _amount,
            timestamp: block.timestamp,
            user: msg.sender
        }));

        // Increase staking balance
        stakingBalance[msg.sender] += _amount;
        lastStakedTime[msg.sender] = block.timestamp;
    }

    function calculateRewards(address _user) public view returns (uint256) {
        uint256 stakedAmount = stakingBalance[_user];
        uint256 stakingTime = block.timestamp - lastStakedTime[_user];
        uint256 reward = stakedAmount * stakingTime * rewardRate / 10000;
        return reward;
    }

    function claimRewards() public {
        uint256 reward = calculateRewards(msg.sender);
        require(reward > 0, "No rewards to claim");
        rewardBalance[msg.sender] += reward;
        lastStakedTime[msg.sender] = block.timestamp;
    }

    function withdrawStakedTokens(uint256 _amount) public {
        require(stakingBalance[msg.sender] >= _amount, "Not enough staked tokens");
        stakingBalance[msg.sender] -= _amount;
    }
}

const express = require('express');
const { MongoClient } = require('mongodb');
const Web3 = require('web3');

const app = express();
const PORT = 3000;

// MongoDB Connection
const client = new MongoClient('mongodb://localhost:27017');
client.connect();
const db = client.db('bloodtype');

// Web3 Blockchain Connection
const web3 = new Web3('http://127.0.0.1:8545');
const contractABI = [ /* Contract ABI from Solidity */ ];
const contractAddress = '0xYourContractAddressHere';
const contract = new web3.eth.Contract(contractABI, contractAddress);

// BloodType Class (Backend Logic)
class BloodType {
    async stakeTokens(userAddress, amount) {
        try {
            const transaction = await contract.methods.stakeTokens(amount).send({
                from: userAddress,
                gas: 2000000
            });
            await db.collection('stakes').insertOne({
                userAddress, amount, transactionHash: transaction.transactionHash
            });
            return transaction.transactionHash;
        } catch (error) {
            throw new Error("Error in staking tokens: " + error.message);
        }
    }

    async claimRewards(userAddress) {
        try {
            const transaction = await contract.methods.claimRewards().send({
                from: userAddress,
                gas: 2000000
            });
            return transaction.transactionHash;
        } catch (error) {
            throw new Error("Error in claiming rewards: " + error.message);
        }
    }
}

// DonFlow Class (Within BloodType)
class DonFlow {
    async createInvestment(userAddress, supervisor, director, amount) {
        try {
            const transaction = await contract.methods.createInvestment(supervisor, director, amount).send({
                from: userAddress,
                gas: 2000000
            });
            await db.collection('investments').insertOne({
                userAddress, supervisor, director, amount, transactionHash: transaction.transactionHash
            });
            return transaction.transactionHash;
        } catch (error) {
            throw new Error("Error in creating investment: " + error.message);
        }
    }
}

const bloodType = new BloodType();
const donFlow = new DonFlow();

// Express Routes
app.post('/stake', async (req, res) => {
    const { userAddress, amount } = req.body;
    try {
        const txHash = await bloodType.stakeTokens(userAddress, amount);
        res.json({ success: true, txHash });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

app.post('/invest', async (req, res) => {
    const { userAddress, supervisor, director, amount } = req.body;
    try {
        const txHash = await donFlow.createInvestment(userAddress, supervisor, director, amount);
        res.json({ success: true, txHash });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

app.listen(PORT, () => {
    console.log(`Backend server is running on port ${PORT}`);
});

//Dockerfile for Backend
# Use Node.js 16
FROM node:16

# Set working directory
WORKDIR /app

# Copy source code
COPY . .

# Install dependencies
RUN npm install

# Expose the necessary port
EXPOSE 3000

# Run the application
CMD ["node", "server.js"]

//Dockerfile for Blockchain
FROM node:16

WORKDIR /app

COPY . .

RUN npm install

# Install Truffle or Hardhat
RUN npm install -g truffle

# Expose necessary ports
EXPOSE 8545

CMD ["truffle", "develop"]

//Docker-Compose Setup
version: '3'
services:
  backend:
    build: ./backend
    ports:
      - "3000:3000"
    networks:
      - bloodtype-network

  blockchain:
    build: ./blockchain
    ports:
      - "8545:8545"
    networks:
      - bloodtype-network

  mongodb:
    image: mongo
    ports:
      - "27017:27017"
    networks:
      - bloodtype-network

networks:
  bloodtype-network:
    driver: bridge

//Deployment via GitHub Applications
name: CI/CD Pipeline for BloodType

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker
        uses: docker/setup-buildx-action@v1

      - name: Build and Push Docker image
        run: |
          docker-compose build
          docker-compose up -d

  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy to Production
        run: |
          docker-compose down
          docker-compose up -d
