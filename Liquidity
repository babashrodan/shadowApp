import time

class NebulaLiquiditySystem:
    def __init__(self):
        # Define rate tiers (USD per transaction)
        self.tiers = {
            "low": {"rate": 0.000125, "markup": 0.15, "multiple": 1.62},
            "medium": {"rate": 0.000225, "markup": 0.25, "multiple": 4.86},
            "high": {"rate": 0.000365, "markup": 0.35, "multiple": 11.0376},
        }
        self.lockup_capital = 25e9  # $25 billion
        self.liquidity_threshold = 0.5  # Arbitrary threshold for high vs low liquidity
    
    def calculate_throughput(self, tier, liquidity_level):
        """Calculates throughput based on liquidity level and tier."""
        rate = self.tiers[tier]["rate"]
        markup = self.tiers[tier]["markup"]
        multiple = self.tiers[tier]["multiple"]

        # Adjust rate based on liquidity level
        if liquidity_level >= self.liquidity_threshold:
            # High liquidity: Compound rate
            effective_rate = rate + (rate * markup)
        else:
            # Low liquidity: Standardize allocation
            effective_rate = rate

        # Calculate per-second, per-minute, per-hour, and per-day throughput
        per_second = effective_rate * self.lockup_capital
        per_minute = per_second * 60
        per_hour = per_minute * 60
        per_day = per_hour * 24

        # Calculate yearly ROI
        roi = self.lockup_capital * multiple
        
        return {
            "effective_rate": effective_rate,
            "per_second": per_second,
            "per_minute": per_minute,
            "per_hour": per_hour,
            "per_day": per_day,
            "roi": roi,
        }

    def display_throughput(self, tier, throughput):
        """Displays the calculated throughput in a formatted manner."""
        print(f"\n--- Liquidity Throughput for {tier.capitalize()} Tier ---")
        print(f"Effective Rate: ${throughput['effective_rate']:.8f} USD")
        print(f"Throughput per Second: ${throughput['per_second']:.2f} USD")
        print(f"Throughput per Minute: ${throughput['per_minute']:.2f} USD")
        print(f"Throughput per Hour: ${throughput['per_hour']:.2f} USD")
        print(f"Throughput per Day: ${throughput['per_day']:.2f} USD")
        print(f"Yearly ROI: ${throughput['roi']:.2f} USD")

    def run_simulation(self, liquidity_level):
        """Runs the simulation for all tiers based on liquidity level."""
        for tier in self.tiers:
            throughput = self.calculate_throughput(tier, liquidity_level)
            self.display_throughput(tier, throughput)


# Initialize the system
nebula = NebulaLiquiditySystem()

# Simulate high liquidity
print("Simulating High Liquidity...")
high_liquidity_level = 0.8  # Example value for high liquidity
nebula.run_simulation(high_liquidity_level)

# Pause for a moment
time.sleep(2)

# Simulate low liquidity
print("\nSimulating Low Liquidity...")
low_liquidity_level = 0.3  # Example value for low liquidity
nebula.run_simulation(low_liquidity_level)
